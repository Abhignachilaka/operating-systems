#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_THREADS 5
#define MAX_COUNT 10

pthread_mutex_t mutex;
int counter = 0;

void *increment_counter(void *thread_id) {
    long tid = (long)thread_id;

    for (int i = 0; i < MAX_COUNT; i++) {
        pthread_mutex_lock(&mutex); // Lock mutex before accessing shared resource
        counter++;
        printf("Thread %ld: Counter = %d\n", tid, counter);
        pthread_mutex_unlock(&mutex); // Unlock mutex after accessing shared resource
    }

    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];
    int rc;
    long t;

    // Initialize mutex
    pthread_mutex_init(&mutex, NULL);

    // Create threads
    for (t = 0; t < NUM_THREADS; t++) {
        printf("Creating thread %ld\n", t);
        rc = pthread_create(&threads[t], NULL, increment_counter, (void *)t);
        if (rc) {
            printf("Error: Unable to create thread, %d\n", rc);
            exit(-1);
        }
    }

    // Join threads
    for (t = 0; t < NUM_THREADS; t++) {
        pthread_join(threads[t], NULL);
    }

    // Destroy mutex
    pthread_mutex_destroy(&mutex);

    printf("Final counter value: %d\n", counter);

    pthread_exit(NULL);
}
